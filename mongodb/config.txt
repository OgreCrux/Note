MongoDB setup  (CentOS)

1. Setup yum repo, for x64
	[mongodb]
	name=MongoDB Repository
	baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64/
	gpgcheck=0
	enabled=1

2. install MongoDB
	yum install mongodb-org
	
3. configure, /etc/mongod.conf
	. comment out "bind_ip", if need to serve other hosts

4.	Replication option
	. un-comment "replSet = SetName", and give the SetName on every dB server.
	. generate the keyFile using the command "openssl rand -base64 741"
	. un-comment "keyFile" and make user every replica set server using the same keyFile.
	. start up all of the MogoDB servers

	1. connect Mongo shell
		mongo
	2. initiate the replica
		> rs.initiate()
	3. check the replica setting
		> rs.conf()
	4. add other hosts
		> rs.add("other DB hostname")
		can add up to 12 hosts in one replica set
	5. check the replica status
		> rs.status()
		current setting
			{
			        "set" : "webapp",
			        "date" : ISODate("2014-07-28T19:34:14Z"),
			        "myState" : 1,
			        "members" : [
			                {
			                        "_id" : 0,
			                        "name" : "MonDB.realtaasa.com:27017",
			                        "health" : 1,
			                        "state" : 1,
			                        "stateStr" : "PRIMARY",
			                        "uptime" : 1206813,
			                        "optime" : Timestamp(1406248186, 1),
			                        "optimeDate" : ISODate("2014-07-25T00:29:46Z"),
			                        "electionTime" : Timestamp(1405370845, 1),
			                        "electionDate" : ISODate("2014-07-14T20:47:25Z"),
			                        "self" : true
			                },
			                {
			                        "_id" : 1,
			                        "name" : "mondb2.realtaasa.com:27017",
			                        "health" : 1,
			                        "state" : 2,
			                        "stateStr" : "SECONDARY",
			                        "uptime" : 1205211,
			                        "optime" : Timestamp(1406248186, 1),
			                        "optimeDate" : ISODate("2014-07-25T00:29:46Z"),
			                        "lastHeartbeat" : ISODate("2014-07-28T19:34:14Z"),
			                        "lastHeartbeatRecv" : ISODate("2014-07-28T19:34:13Z"),
			                        "pingMs" : 0,
			                        "syncingTo" : "MonDB.realtaasa.com:27017"
			                },
			                {
			                        "_id" : 2,
			                        "name" : "mondb3.realtaasa.com:27017",
			                        "health" : 1,
			                        "state" : 2,
			                        "stateStr" : "SECONDARY",
			                        "uptime" : 1205190,
			                        "optime" : Timestamp(1406248186, 1),
			                        "optimeDate" : ISODate("2014-07-25T00:29:46Z"),
			                        "lastHeartbeat" : ISODate("2014-07-28T19:34:14Z"),
			                        "lastHeartbeatRecv" : ISODate("2014-07-28T19:34:13Z"),
			                        "pingMs" : 0,
			                        "syncingTo" : "MonDB.realtaasa.com:27017"
			                }
			        ],
			        "ok" : 1
			}
			
5. once the keyFile is enable the "User Authentication" is turned on for remote access, 
   so if no admin user been created for the DB, access the DB remotely will be denied.

	. without creating an admin user on the DB, the localhost privilege access will not be affected    
	. create a local admin, on Mongo shell
		> use admin 
		> db.createUser(
		{
			"user"		: "admin",
			"password" 	: "clearTextPassword",
			"roles" [
						"root"
					]
		}
	. change the node startup script wth ad access info
		export MONGO_URL='mongodb://{userID}:password@{Mongo DB Host}:port,{host}:port/webapp'
	. create dbOwner for each database
	. Roles info can be found at http://docs.mongodb.org/manual/reference/built-in-roles/


* mondb command

list dbs
	> show dbs

select current db
	> use db

authenticate
	> db.auth("userID","password")

list db user
	> show users

current DB user info
	admin db
	{
	        "_id" : "admin.admin",
	        "user" : "admin",
	        "db" : "admin",
	        "roles" : [
	                {
	                        "role" : "dbOwner",
	                        "db" : "admin"
	                },
	                {
	                        "role" : "root",
	                        "db" : "admin"
	                }
	        ]
	}
	{
	        "_id" : "admin.backup",
	        "user" : "backup",
	        "db" : "admin",
	        "roles" : [
	                {
	                        "role" : "backup",
	                        "db" : "admin"
	                },
	                {
	                        "role" : "restore",
	                        "db" : "admin"
	                }
	        ]
	}

	webapp db
	{
	        "_id" : "webapp.webapp",
	        "user" : "webapp",
	        "db" : "webapp",
	        "roles" : [
	                {
	                        "role" : "dbOwner",
	                        "db" : "webapp"
	                }
	        ]
	}
	

	